generate mail: 
- bin/rails generate mailer <mail name>

edit mailer on app/mailers/user_mailer.rb like other controller
ex :
  class UserMailer < ApplicationMailer
    default from: 'notifications@example.com'
   
    def welcome_email(user)
      @user = user
      @url  = 'http://example.com/login'
      mail(to: @user.email, subject: 'Welcome to My Awesome Site')
    end
  end
Create a Mailer View: app/views/user_mailer/
ex: create  welcome_email.html.erb

-calling the mailer: create 4 models :
  $ bin/rails generate scaffold user name email login
  $ bin/rake db:migrate
-custom action on controller.

List actions mailer:
- headers - Specifies any header on the email you want. You can pass a hash of header field names and value pairs, or you can call headers[:field_name] =
'value'.
- attachments - Allows you to add attachments to your email. For example, attachments['file-name.jpg'] = File.read('file-name.jpg').
- mail - Sends the actual email itself. You can pass in headers as a hash to the mail method as a parameter, mail will then create an email, either plain text, or multipart, depending on what email templates you have defined.

Sending multiple receiption : :cc, :bcc;
Sending email with name:
  def welcome_email(user)
    @user = user
    email_with_name = %("#{@user.name}" <#{@user.email}>)
    mail(to: email_with_name, subject: 'Welcome to My Awesome Site')
  end
Mailer Views: app/views/name_of_mailer_class
  def welcome_email(user)
      @user = user
      @url  = 'http://example.com/login'
      mail(to: @user.email,
           subject: 'Welcome to My Awesome Site') do |format|
        format.html { render 'another_template' }
        format.text { render text: 'Render text' }
      end
    end

sending an email: mail(to:...body, content, subject...)
receving mails"
Receiving email: def receive(email)
                  page = Page.find_by(address: email.to.first)
                  page.emails.create(
                    subject: email.subject,
                    body: email.body
                  )
Action Mailer allows for you to specify a before_action, after_action and around_action.

config/environments/$RAILS_ENV.rb
